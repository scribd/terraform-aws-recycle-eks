{
  "Comment": "A open source module to taint/drain eks worker nodes gracefully",
  "StartAt": "Add an additional worker node",
  "States": {
     "Add an additional worker node": {
      "Comment": "adding an additional worker node to eks cluster",
      "Type": "Pass",
      "Next": "Put and node to standby"
    },
     "Put and node to standby": {
      "Comment": "Putting and worker node to standby",
      "Type": "Pass",
      "Next": "is node on standby and all other nodes on inservice?"
    },
    "is node on standby and all other nodes on inservice?": {
      "Comment": "A Choice state adds branching logic to a state machine. Choice rules can implement 16 different comparison operators, and can be combined using And, Or, and Not",
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.IsHelloWorldExample",
          "BooleanEquals": true,
          "Next": "Yes"
        },
        {
          "Variable": "$.IsHelloWorldExample",
          "BooleanEquals": false,
          "Next": "No"
        }
      ],
      "Default": "Yes"
    },
    "Yes": {
      "Type": "Pass",
      "Next": "Wait 360 sec"
    },
    "No": {
      "Type": "Pass",
      "Next": "Wait 3 sec"
    },
    "Wait 3 sec": {
      "Comment": "A Wait state delays the state machine from continuing for a specified time.",
      "Type": "Wait",
      "Seconds": 3,
      "Next": "is node on standby and all other nodes on inservice?"
    },
    "Wait 360 sec": {
      "Comment": "A Wait state delays the state machine from continuing for a specified time.",
      "Type": "Wait",
      "Seconds": 3,
      "Next": "taint the node"
    },
    "taint the node": {
      "Type": "Pass",
      "Next": "Wait 1200 sec"
    },
    "Wait 1200 sec": {
      "Comment": "A Wait state delays the state machine from continuing for a specified time.",
      "Type": "Wait",
      "Seconds": 3,
      "Next": "All active pods gone?"
    },
    "All active pods gone?": {
      "Comment": "A Choice state adds branching logic to a state machine. Choice rules can implement 16 different comparison operators, and can be combined using And, Or, and Not",
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.IsHelloWorldExample",
          "BooleanEquals": true,
          "Next": "Yes-Terminate the node"
        },
        {
          "Variable": "$.IsHelloWorldExample",
          "BooleanEquals": false,
          "Next": "No-Let's Wait"
        }
      ],
      "Default": "Yes"
    },
    "Yes-Terminate the node": {
      "Type": "Pass",
      "Next": "Terminate the node"
    },
    "No-Let's Wait": {
      "Type": "Pass",
      "Next": "Wait 1200 sec"
    },
    "Terminate the node": {
      "Type": "Pass",
      "End": true
    }
  }
}